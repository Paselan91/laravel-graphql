#!/bin/sh

# エラーがあるかどうか
isFixErr=false
isLintErr=false

# ファイルをまとめる
files=""

# コミットするファイルのみ通す
# ホスト側とコンテナー側でパスが違うので中でリネームする
for FILE in `git diff --staged --name-only | grep -e .php`; do
    if [ -e $FILE ]; then
        renameFile=`echo ${FILE} | cut -c 5-`
        files="$files\n$renameFile"

        # PHP CS Fixerへ読み込ませる用（スペース区切り）
        renameFileForFix=`echo ${FILE} | cut -c 5- | grep -e app/` # pre-comimtではapp配下のみをフォーマット対象とする
        if [ "$renameFileForFix" != "" ]; then
            filesForFix="$filesForFix $renameFileForFix"
        fi

        git add $FILE
    fi
done


# PHP CS Fixer （予期せぬ差分混入防止のため自動フォーマットはしない）
if [ "$filesForFix" != "" ]; then
    echo '--------------------------------'
    echo ' Start PHPCSFixer .... '
    echo ''
    CSFIXER=`docker-compose exec -T app ./vendor/bin/php-cs-fixer --config=.php-cs-fixer.dist.php fix -v --dry-run $filesForFix`

    hasFix=`echo $CSFIXER | grep '1)'`

    if [ "$hasFix" != "" ]; then
        echo $CSFIXER
        isFixErr=true
        break
    fi

    # エラーが出た場合exitする
    if [ $isFixErr = "true" ]; then
        echo ''
        echo composer format でフォーマットしてください。
        echo ''
        exit 1
    fi
    echo ''
    echo ' End PHPCSFixer'
    echo ''
fi

# PHPStan（appのみを対象とする）
phpStanFiles=`echo $files | grep -e app/`
if [ "$phpStanFiles" != "" ]; then
    echo '--------------------------------'
    echo ' Start PHPStan .... '
    echo ''
    PHPSTAN=`docker-compose exec -T app php vendor/bin/phpstan analyse $phpStanFiles --memory-limit=1G`
    notError=`echo $PHPSTAN | grep 'No errors'`

    if [ "$notError" = "" ]; then
        echo $PHPSTAN
        isLintErr=true
        break
    fi

    # phpstanでエラーが出た場合exitする
    if [ $isLintErr = "true" ]; then
        echo ''
        echo composer lint で型エラーを修正してください。
        echo ''
        exit 1
    fi
    echo ''
    echo ' End PHPStan '
    echo ''
fi

# コミット時にGraphQL Validate Schemaを実行
echo '--------------------------------'
echo ' Start Validate Schema .... '
echo ''
validateSchema=`docker compose exec -T app php artisan lighthouse:validate-schema`
isValidateSchemaErr=`echo $validateSchema | grep 'The defined schema is valid.'`
if [ "$isValidateSchemaErr" == "" ]; then
    echo ''
    echo GraphQLのSchemaエラー src/graphql配下のエラーを修正して下さい
    echo ''
    exit 1
fi

# コミット時にテストを実行
echo '--------------------------------'
echo ' Start Test .... '
echo ''
test=`docker-compose exec -T app php artisan test --testsuite=Feature`
isTestError=`echo $test | grep 'FAIL'`
if [ "$isTestError" != "" ]; then
    echo ''
    echo テストに失敗しました。
    echo $test
    echo ''
    exit 1
fi
echo ''
echo ' End Test '
echo ''
